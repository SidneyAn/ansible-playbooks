---
#
# Copyright (c) 2019 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role is to restore StarlingX Openstack application.
#

- name: Fail if backup_filename is not defined or set
  fail:
    msg: "Mandatory configuration parameter backup_filename is not defined or set."
  when: backup_filename is not defined or backup_filename is none

# Check if the backup tarball exists in {{ backup_dir }}. This check can
# serve as a guard to ensure restore StarlingX Openstack is run on the
# right system because after the platform is restored the backup tarball is
# stored in {{ backup_dir }} on controller-0.
- name: Check if the backup tarball exists in {{ backup_dir }}
  stat:
    path: "{{ backup_dir }}/{{ backup_filename }}"
  register: backup_file_result

- name: Fail if the backup tarball doesn't exist
  fail:
    msg: Cannot find backup tarball {{ backup_dir }}/{{ backup_filename }}!
  when: not backup_file_result.stat.exists

- name: Check if it is the active controller
  shell: source /etc/platform/openrc; system host-show $(cat /etc/hostname) | grep -i "Controller-Active"
  register: active_ctlr

- name: Fail if it is not the active controller
  fail:
    msg: "Restore StarlingX Openstack application can only be done on the active controller."
  when: active_ctlr.rc != 0

- name: Check if restoring StarlingX Openstack is already in progress
  stat:
    path: "{{ restore_openstack_in_progress_flag }}"
  register: restore_openstack_in_progress

- name: Fail if restoring StarlingX Openstack is already in progress
  fail:
    msg: "Restoring StarlingX Openstack is already in progress!"
  when: restore_openstack_in_progress.stat.exists

- name: Search for stx-openstack application
  shell: source /etc/platform/openrc; system application-list | grep 'stx-openstack'
  register: check_openstack
  failed_when: false

# If stx-application doesn't exist or is in applied state, the restore is complete.
- block:
  - debug:
      msg: >-
        Either StarlingX OpenStack application had not been applied when the system was
        backed up or it has already been restored successfully.
  - meta: end_play

  when: check_openstack.rc != 0 or check_openstack.stdout is search('applied')

# If stx-application is not in uploaded state, it means restore_openstack playbook
# has been run and was not successfully. Re-run the playbook is not supported.
- name: Fail if StarlingX Openstack is not in the right state for restore
  fail:
    msg: >-
      stx-openstack application must be in ‘uploaded’ state for the restore to proceed.
      The restore must have failed already.

  when: check_openstack.stdout is not search('uploaded')

- name: Check if platform-integ-apps was applied successfully during controller-0 unlock
  shell: >-
    source /etc/platform/openrc; system application-list |
    grep 'platform-integ-apps.*applied.*completed'
  register: check_platform_integ

- name: Fail if platform-integ-apps was not applied successfully
  fail:
    msg: Application platform-integ-apps was not applied successfully during controller-0 unlock
  when: check_platform_integ.rc != 0

- name: Create restore StarlingX Openstack in progress flag file in /opt/platform
  file:
    path: "{{ restore_openstack_in_progress_flag }}"
    state: touch

- block:
  - name: Bring up MariaDB and its prerequisite services
    shell: >-
      source /etc/platform/openrc; system application-apply --mode restore_db stx-openstack

  - name: Checking MariaDB apply progress ... (max 30 mins)
    shell: source /etc/platform/openrc; system application-list | grep 'stx-openstack'
    register: check_app_state
    until: check_app_state.stdout is search('applied') or
           check_app_state.stdout is search('apply-failed')
    retries: 30
    delay: 60

  - name: Check if MariaDB pod is running
    shell: >-
      kubectl --kubeconfig={{ kube_config_dir }} get pods -n openstack |
      grep {{ mariadb_pod }} | grep -i 'Running'
    failed_when: false
    register: check_mariadb_pod

  - name: Fail if MariaDB service cannot be restored successfully
    fail:
      msg: >-
        MariaDB service cannot be restored successfully.
        Restore StarlingX Openstack application failed.
    when: check_app_state.stdout is not search('applied') or
          check_mariadb_pod.rc != 0

  - block:
    - name: Check if openstack-garbd pod is running if it is not an all-in-one system
      shell: >-
        kubectl --kubeconfig={{ kube_config_dir }} get pods -n openstack |
        grep openstack-garbd | grep -i 'Running'
      failed_when: false
      register: check_garbd_pod

    - name: Fail if openstack-garbd pod is not running
      fail:
        msg: Openstack-garbd pod is not running. Restore StarlingX Openstack application failed.
      when: check_garbd_pod.rc != 0

    when: system_type == "Standard"

  - name: Create MariaDB backup directory
    file:
      path: "{{ backup_dir }}/mariadb"
      state: directory
      recurse: yes
      owner: root
      group: root
      mode: 0755

  - name: Extract MariaDB data to backup directory
    command: >-
      tar -C {{ backup_dir }}/mariadb -xpf {{ backup_dir }}/{{ backup_filename }}
      --transform='s,.*/,,' '*/*\.mariadb\.*'
    args:
      warn: false

  - name: Set k8s cmd prefix
    set_fact:
      kube_cmd_prefix: "kubectl --kubeconfig={{ kube_config_dir }} exec -i {{ mariadb_pod }} -n openstack -- bash -c "

  - name: List MariaDB backup files
    shell: ls {{ backup_dir }}/mariadb/*
    register: mariadb_files

  - name: Create MariaDB database
    shell: >-
      {{ kube_cmd_prefix }}
      'exec mysql -uroot -p"$MYSQL_DBADMIN_PASSWORD" -e"create database {{ (item|basename).split('.')[0] }}"'
    with_items: "{{ mariadb_files.stdout_lines }}"

  - name: Restore MariaDB data
    shell: >-
      {{ kube_cmd_prefix }}
      'exec mysql -uroot -p"$MYSQL_DBADMIN_PASSWORD" {{ (item|basename).split('.')[0] }}'
      < {{ item }}
    with_items: "{{ mariadb_files.stdout_lines }}"

  - name: Remove MariaDB backup directory
    file:
      path: "{{ backup_dir }}/mariadb"
      state: absent

  - name: Bring up Cinder and Glance services and the prerequisites
    shell: >-
      source /etc/platform/openrc; system application-apply --mode restore_storage stx-openstack

  - name: Checking Cinder and Glance apply progress... (max 30 mins)
    shell: >-
      source /etc/platform/openrc; system application-list | grep 'stx-openstack'
    register: check_app_state
    until: check_app_state.stdout is search('applied') or
           check_app_state.stdout is search('apply-failed')
    retries: 30
    delay: 60

  - name: Fail if Cinder and Glance services cannot be restored successfully
    fail:
      msg: >-
        Cinder and Glance services cannot be restored successfully.
        Restore StarlingX Openstack application failed.
    when: check_app_state.stdout is not search('applied')

  - block:
    - name: Inform user to restore Glance images and Cinder volumes
      debug:
        msg: >-
          Please refer to the system administration guide to restore Glance images
          and Cinder volumes.

    - meta: end_play
    when: restore_ceph_data

  - name: Continue to bring up the remaining StarlingX Openstack services
    shell: source /etc/platform/openrc; system application-apply --mode normal stx-openstack

  - name: Checking stx-openstack apply progress for the remaining Openstack services... (max 50 mins)
    shell: source /etc/platform/openrc; system application-list | grep 'stx-openstack'
    register: check_app_state
    until: check_app_state.stdout is search('applied') or
           check_app_state.stdout is search('apply-failed')
    retries: 50
    delay: 60

  - name: Fail if the remaining Openstack services cannot be restored successfully
    fail:
      msg: StarlingX Openstack application is not applied successfully.
    when: check_app_state.stdout is not search('applied')

  - debug:
      msg: Restore StarlingX Openstack application is successful!

  always:
    - name: Remove restore_openstack_in_progress flag file
      file:
        path: "{{ restore_openstack_in_progress_flag }}"
        state: absent
