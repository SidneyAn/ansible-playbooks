---
#
# Copyright (c) 2019 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#
# ROLE DESCRIPTION:
#   This role performs following tasks:
#     1. Retrieve the override file from the backup tarball
#        required for the controller bootstrap.
#     2. Verify if platform restore should proceed
#
- block:
  - name: Fail if backup_filename is not defined or set
    fail:
      msg: "Mandatory configuration parameter backup_filename is not defined or set."
    when: backup_filename is not defined or backup_filename is none

  - name: Fail if initial_backup_dir is not defined or set
    fail:
      msg: "Mandatory configuration parameter initial_backup_dir is not defined or set."
    when: initial_backup_dir is not defined or initial_backup_dir is none

  - name: Look for override backup file in the backup tarball
    shell: "tar -tf {{ initial_backup_dir }}/{{ backup_filename }} | grep '_override_backup.yml'"
    args:
      warn: false
    failed_when: false
    register: search_result

  # Note that due to Ansible mishandling of boolean values via extra-vars we are
  # adding supplementary validation here.
  # See: https://github.com/ansible/ansible/issues/17193
  - name: Check for Ceph data wipe flag
    fail:
      msg: "wipe_ceph_osds is misconfigured. Valid value is either 'true' or 'false'"
    when: (not wipe_ceph_osds | type_debug == 'bool') and
          (wipe_ceph_osds != 'true') and
          (wipe_ceph_osds != 'false')

  - block:
    - name: Extract override file from backup tarball
      shell: >-
        tar -C {{ override_files_dir }} -xf {{ initial_backup_dir }}/{{ backup_filename }} --transform='s,.*/,,'
        {{ search_result.stdout_lines[0] }}
      args:
        warn: false

    - name: Prepare to rename override file
      set_fact:
        override_filename: restore_platform_overrides.yml

    - name: Rename override file for bootstrap
      command: >-
        mv -f {{ override_files_dir }}/{{ (search_result.stdout_lines[0] | basename) }}
        {{ override_files_dir }}/{{ override_filename }}

    - name: Include override data
      include_vars: "{{ override_files_dir }}/{{ override_filename }}"

    when: search_result.rc == 0

  - name: Fail if override file is missing
    fail:
      msg: >-
        Cannot find {{ initial_backup_dir }}/{{ backup_filename }}
        or the override file is missing in the backup tarball!
    when: search_result.rc != 0

  delegate_to: localhost

- name: Retrieve software version number
  # lookup module does not work with /etc/build.info as it does not have ini
  # format. Resort to shell source.
  shell: source /etc/build.info; echo $SW_VERSION
  register: sw_version_result

- name: Fail if software version is not defined
  fail:
    msg: "SW_VERSION is missing in /etc/build.info"
  when: sw_version_result.stdout_lines|length == 0

- name: Set software version fact
  set_fact:
    software_version: "{{ sw_version_result.stdout_lines[0] }}"

- name: Set archive parameters for bootstrap
  set_fact:
    archive_puppet_permdir: "opt/platform/puppet/{{ software_version }}/hieradata"
    archive_ssh_config_permdir: "opt/platform/config/{{ software_version }}/ssh_config"
    archive_config_permdir: "opt/platform/config/{{ software_version }}"
    archive_keyring_permdir: "opt/platform/.keyring/{{ software_version }}/python_keyring"
    archive_branding_permdir: "opt/platform/config/{{ software_version }}/branding"
    archive_banner_permdir: "opt/platform/config/{{ software_version }}/banner/etc"

- block:
  # Bail if the host has been unlocked
  - name: Check initial config flag
    stat:
      path: /etc/platform/.initial_config_complete
    register: initial_config_done

  - name: Fail if the host has been unlocked
    fail:
      msg: "Host {{ ansible_host }} has been unlocked. Cannot perform restore."
    when: initial_config_done.stat.exists

  - name: Check if restore is in progress
    stat:
      path: "{{ restore_in_progress_flag }}"
    register: restore_in_progress

  - name: Fail if restore is already in progress
    fail:
      msg: " Restore is already in progress!"
    when: restore_in_progress.stat.exists

  - name: Create {{ restore_in_progress_flag }} flag file
    file:
      path: "{{ restore_in_progress_flag }}"
      state: touch

  - name: For remote play set target_backup_dir to /scratch
    set_fact:
      target_backup_dir: /scratch
    when: inventory_hostname != "localhost"

  - name: For local play set target_backup_dir to initial_backup_dir
    set_fact:
      target_backup_dir: "{{ initial_backup_dir }}"
    when: inventory_hostname == "localhost"

  - name: Set restore file parameter
    set_fact:
      restore_data_file: "{{ target_backup_dir }}/{{ backup_filename }}"

  become: yes
  become_user: root
